/* JDBCPersonDAO.java
 * ============================================================
 * Copyright (C) 2012-2013 Universiteit Gent
 * 
 * Bijlage bij het vak 'Programmeren 2'.
 * 
 * Auteur: Kris Coolsaet
 */
package prog2.contacts.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import prog2.contacts.DataAccessException;
import prog2.contacts.Person;
import prog2.contacts.PersonDAO;

/**
 * Implementatie van {@link PersonDAO} met behulp van JDBC.
 */
class JDBCPersonDAO extends JDBCAbstractDAO implements PersonDAO {

    public JDBCPersonDAO(Connection connection) {
        super(connection);
    }

    @Override
    public int createPerson(String name, String firstName) throws DataAccessException {
        try (PreparedStatement ps = prepareAutoGenerated(
                "INSERT INTO personen(voornaam,familienaam) VALUES (?,?)")) {
            ps.setString(1, firstName);
            ps.setString(2, name);
            ps.executeUpdate();
            try (ResultSet keys = ps.getGeneratedKeys()) {
                if (keys.next()) {
                    return keys.getInt(1);
                } else {
                    throw new DataAccessException("Could not retreive generated key 'id'.", null);
                }
            }

        } catch (SQLException ex) {
            throw new DataAccessException("Could not create person.", ex);
        }
    }

    @Override
    public void updatePerson(int id, String name, String firstName) throws DataAccessException {
        try (PreparedStatement ps = prepare(
                "UPDATE personen SET voornaam = ?, familienaam = ? WHERE id = ?")) {
            ps.setString(1, firstName);
            ps.setString(2, name);
            ps.setInt(3, id);
            ps.executeUpdate();
        } catch (SQLException ex) {
            throw new DataAccessException("Could not update person.", ex);
        }
    }

    @Override
    public void deletePerson(int id) throws DataAccessException {
        try (PreparedStatement ps = prepare(
                "DELETE FROM personen WHERE id = ?")) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (SQLException ex) {
            throw new DataAccessException("Could not delete person.", ex);
        }
    }

    @Override
    public Iterable<Person> findPersons(String namePrefix) throws DataAccessException {
        try (PreparedStatement ps = prepare(
                "SELECT id,voornaam,familienaam FROM personen " +
                "WHERE familienaam LIKE (? ||'%') " +
                "ORDER BY familienaam, voornaam")) {
            ps.setString (1, namePrefix);
            try (ResultSet rs = ps.executeQuery()) {
                List<Person> result = new ArrayList<> ();
                while (rs.next()) {
                    result.add (new Person (
                            rs.getInt ("id"),
                            rs.getString ("familienaam" ),
                            rs.getString ("voornaam")));
                }
                return result;
            }
        } catch (SQLException ex) {
            throw new DataAccessException("Could not search for persons.", ex);
        }
    }
}
